# -*- coding: utf-8 -*-
"""TabelaHash-PO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ne5GyOiRuhFe3bnwsRUr8Ax5Np5_nW-v
"""

import sqlite3
try:
  conn = sqlite3.connect('pessoa.db')
  cursor = conn.cursor()
  sqlite_insert_query = """SELECT name FROM sqlite_master WHERE type='table' AND name='Clientes';"""
  table = cursor.execute(sqlite_insert_query)
  conn.commit()
  row = cursor.fetchone()
  if(row is not None):
    conn.execute("DROP TABLE Clientes")
    conn.commit()
  
  conn.execute('''
  CREATE TABLE Clientes (
    Id INTEGER PRIMARY KEY NOT NULL,
    Nome NVARCHAR NOT NULL ,
    Endereco NVARCHAR NOT NULL ,
    Telefone NVARCHAR NOT NULL 
  );''')
  conn.commit()
  print("Tabela Cliente criada");
except sqlite3.Error as error:
    print("Failed to insert data into sqlite table", error)
finally:
    if (conn):
        conn.close()
        print("Conexão sqlite finalizada")

import sqlite3
try:
  conn = sqlite3.connect('pessoa.db')
  conn.execute("INSERT INTO Clientes(Nome, Endereco, Telefone) VALUES('Marcelo', 'Rua tarciano numero 1432', '85992117589');")
  conn.commit()
  print("Registro Inserido");
except sqlite3.Error as error:
    print("Erro ao inserir dados na tabela Cliente", error)
finally:
    if (conn):
        conn.close()
        print("Conexão sqlite finalizada")

try:
    sqliteConnection = sqlite3.connect('pessoa.db')
    cursor = sqliteConnection.cursor()
    sqlite_insert_query = """SELECT * from Clientes"""
    count = cursor.execute(sqlite_insert_query)
    sqliteConnection.commit()
    for row in cursor:
      print(row)
    cursor.close()
except sqlite3.Error as error:
    print("Failed to insert data into sqlite table", error)
finally:
    if (sqliteConnection):
        sqliteConnection.close()
        print("Conexão sql fechada")

class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class HashTable:
  def __init__(self):
    self.capacity = 10
    self.size = 0
    self.buckets = [None] * self.capacity
  
  def insert(self, key, value):
    self.size += 1
    index = self.hash(key)
    node = self.buckets[index]
    if node is None:
      self.buckets[index] = Node(key, value)
      return
    prev = node
    while node is not None:
      prev = node
      node = node.next
    prev.next = Node(key, value)
    return
  def hash(self, key):
    hashsum = 0
    for idx, c in enumerate(key):
      hashsum += (idx + len(key)) ** ord(c)
      hashsum = hashsum % self.capacity
    return hashsum
  def find(self, key):
    index = self.hash(key)
    node = self.buckets[index]
    while node is not None and node.key != key:
      node = node.next
    if node is None:
      return None
    else:
      return node.value
  def remove(self, key):
    index = self.hash(key)
    node = self.buckets[index]
    while node is not None and node.key != key:
      node = node.next
    if node is None:
      return None
    else:
      self.buckets.pop(index)
      return node.value

class Hash:

     def __init__(self,tam):
          self.tab = {}
          self.tam_max = tam

     def funcaohash(self, chave):
          v = int(chave)
          return v%self.tam_max

     def cheia(self):
          return len(self.tab) == self.tam_max

     def imprime(self):
          for i in self.tab:
               print("Hash[%d] = " %i, end="")
               print (self.tab[i])

     def apaga(self, chave):
          pos = self.busca(chave)
          if pos != -1:
               del self.tab[pos]
               print("-> Dado da posicao %d apagado" %pos) 
          else:
               print("Item nao encontrado")

     def busca(self, chave):
          pos = self.funcaohash(chave)
          if self.tab.get(pos) == None: # se esta posição não existe
               return -1 #saida imediata
          if self.tab[pos] == chave: 
               return pos
          return -1

     def insere(self, item):
          if self.cheia():
               print("-> ATENÇÃO Tabela Hash CHEIA")
               return
          pos = self.funcaohash(item)
          if self.tab.get(pos) == None: # se posicao vazia
               self.tab[pos] = item
               print("-> Inserido HASH[%d]" %pos)
          else: # se posicao ocupada
               print("-> Ocorreu uma colisao na posicao %d" %pos)             
# fim Classe Hashlinear

tamanhoHash = 5
tab = Hash(tamanhoHash)
print("\n****************************************************")
print("      Tabela HASH Sem Colisões (%d itens) " %tamanhoHash)
print("****************************************************")
for i in range (0,tamanhoHash,1):
     print("\nInserindo elemento %d" %(i + 1));
     item = input(" - Forneca valor numerico inteiro: ")
     tab.insere(item)
item = input("\n - Forneca valor numerico inteiro para buscar: ")
pos = tab.busca(item)
if pos == -1:
     print("Item nao encontrado")
else:
     print("Item encontrado na posicao: ", pos)
item = input("\n - Forneca valor numerico inteiro para apagar: ")
tab.apaga(item)
print("\nImprimindo conteudo")
tab.imprime()
print("\n")

import sqlite3

class ConectarDB:

    def __init__(self):
        self.con = sqlite3.connect(':memory:')
        self.con = sqlite3.connect('db.sqlite3')
        self.cur = self.con.cursor()
        self.criar_tabela()

    def criar_tabela(self):
        try:
            self.cur.execute('''CREATE TABLE IF NOT EXISTS NomeDaTabela (nome TEXT, telefone NUMERIC, endereço TEXT)''')
        except Exception as e:
            print(f'[x] Falha ao criar tabela [x]: {e}')
        else:
            print('[!] Tabela criada com sucesso [!]\n')

    def inserir_registro(self, usuario):
        try:
            self.cur.execute('''INSERT INTO NomeDaTabela VALUES (?, ?, ?)''', usuario)
        except Exception as e:
            print('\n[x] Falha ao inserir registro [x]\n')
            print(f'[x] Revertendo operação (rollback) [x]: {e}\n')
            self.con.rollback()
        else:
            self.con.commit()
            print('\n[!] Registro inserido com sucesso [!]\n')

    def inserir_varios_registros(self, usuarios):
        try:
            self.cur.executemany('''INSERT INTO NomeDaTabela VALUES (?, ?, ?)''', usuarios)
        except Exception as e:
            print('\n[x] Falha ao inserir registro [x]\n')
            print(f'[x] Revertendo operação (rollback) [x]: {e}\n')
            self.con.rollback()
        else:
            self.con.commit()
            print('\n[!] Registro inserido com sucesso [!]\n')

    def consultar_registro_pela_id(self, rowid):
        return self.cur.execute('''SELECT * FROM NomeDaTabela WHERE rowid=?''', (rowid,)).fetchone()

    def consultar_registros(self, limit=10):
        return self.cur.execute('''SELECT * FROM NomeDaTabela LIMIT ?''', (limit,)).fetchall()

    def alterar_registro(self, rowid, nome, telefone, endereço):
        try:
            self.cur.execute('''UPDATE NomeDaTabela SET nome=?, telefone=?, endereço=? WHERE rowid=?''', (nome, telefone, endereço, rowid))
        except Exception as e:
            print('\n[x] Falha na alteração do registro [x]\n')
            print(f'[x] Revertendo operação (rollback) [x]: {e}\n')
            self.con.rollback()
        else:
            self.con.commit()
            print('\n[!] Registro alterado com sucesso [!]\n')

    def remover_registro(self, rowid):
        try:
            self.cur.execute(
                f'''DELETE FROM NomeDaTabela WHERE rowid=?''', (rowid,))
        except Exception as e:
            print('\n[x] Falha ao remover registro [x]\n')
            print(f'[x] Revertendo operação (rollback) [x]: {e}\n')
            self.con.rollback()
        else:
            self.con.commit()
            print('\n[!] Registro removido com sucesso [!]\n')


if __name__ == '__main__':
    # Dados
    usuario = ('Felipe', 987654321, 'Rua 89 numero 456')
    usuarios = [('Maria', 876543210, 'Avenida 13 de maio numero 2345'), ('Pedro', 5099887723, 'Rodovia CE 060 KM 11 numero 3456')]

    # Criando a conexão com o banco.
    banco = ConectarDB()
    banco.inserir_registro(usuario = usuario)
    banco.inserir_varios_registros(usuarios=usuarios)

    print(banco.consultar_registro_pela_id(rowid=1))

    print(banco.consultar_registros())

    print(banco.consultar_registro_pela_id(rowid=1))

    banco.alterar_registro(rowid=1, nome = 'Rafaela', telefone = '99999999', endereço = 'rua tarciano numero 166')
    
    print(banco.consultar_registro_pela_id(rowid=1))

    print(banco.consultar_registros())
    
    banco.remover_registro(rowid=1)
    
    print(banco.consultar_registros())